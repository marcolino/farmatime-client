{
  "name": "acme-client",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "start-dev": "vite",
    "start": "vite preview",
    "build": "echo \"Mode is $NODE_ENV\" && yarn prebuild && yarn vitebuild && yarn postbuild",
    "build-production": "NODE_ENV='production' && echo \"Mode is $NODE_ENV\" && yarn prebuild && yarn vitebuild && yarn postbuild",
    "build-dev": "NODE_ENV='development' && echo \"Mode is $NODE_ENV\" && yarn prebuild && yarn vitebuild-dev && yarn postbuild",
    "build-staging": "NODE_ENV='staging' && echo \"Mode is $NODE_ENV\" && yarn prebuild && yarn vitebuild && yarn postbuild",
    "build-raw": "vite build",
    "lint": "eslint .",
    "test": "vitest --run",
    "prebuild": "yarn i18n-check && yarn inject && yarn build-info-produce && yarn index-produce && yarn sitemap-produce && yarn robots-produce && yarn favicons-produce && yarn manifest-produce && rm -rf build/",
    "vitebuild": "echo 'Generating production build' && vite build --mode production",
    "vitebuild-staging": "echo 'Generating staging build' && vite build --mode staging",
    "vitebuild-dev": "echo 'Generating development build' && vite build --mode development",
    "postbuild": "echo 'Copying build to server' && rm -rf ../acme-server/client/build; cp -a build ../acme-server/client/build",
    "postbuildRM": "rm -f 'index.html' && echo 'Copying build to server' && rm -rf ../acme-server/client/build; cp -a build ../acme-server/client/build",
    "inject": "echo 'Injecting config...' && cd ../acme-server && yarn inject && cd ../acme-client",
    "build-info-produce": "/usr/bin/echo -n 'Producing build-info...' && node --no-warnings=ExperimentalWarning scripts/build-info-produce.js",
    "index-produce": "echo 'Producing index...' && node --no-warnings=ExperimentalWarning scripts/index-produce.js",
    "sitemap-produce": "echo 'Producing sitemap...' && node --no-warnings=ExperimentalWarning scripts/sitemap-produce.js",
    "robots-produce": "echo 'Producing robots...' && node --no-warnings=ExperimentalWarning scripts/robots-produce.js",
    "favicons-produce": "echo 'Producing favicons...' && scripts/favicons-produce.sh",
    "manifest-produce": "echo 'Producing manifest...' && node --no-warnings=ExperimentalWarning scripts/manifest-produce",
    "i18n-prepare": "bash -c 'for dir in $(cat ./src/config.json | jq -r \".locales | keys[]\"); do mkdir -p \"src/locales/$dir/\"; done'",
    "i18n": "yarn i18n-prepare; i18next 'src/**/*.{js,jsx}' --config 'i18next-parser.config.cjs' --silent",
    "i18n-check": "sh -c 'yarn i18n && missing=$(grep --only-matching __STRING_NOT_TRANSLATED__ src/locales/*/translation.json | wc -l); if [ $missing -gt 0 ]; then echo \"$missing strings have to be translated!\"; exit 1; fi'",
    "i18n-list": "grep __STRING_NOT_TRANSLATED__ src/locales/$L/translation.json | sed -r 's/: \"__STRING_NOT_TRANSLATED__\",?$//g'",
    "i18n-translate": "bash -c \"source ~/.venv/bin/activate && scripts/translate.py\"",
    "i18n-list-it": "L='it' yarn i18n-list",
    "i18n-list-fr": "L='fr' yarn i18n-list",
    "i18n-ai-prompt-it": "echo 'Please translate the following strings to Italian, answering with a JSON in this format: { \"string\": \"translation\", ... }' && yarn i18n-list-it",
    "i18n-ai-prompt-fr": "echo 'Please translate the following strings to French, answering with a JSON in this format: { \"string\": \"translation\", ... }' && yarn i18n-list-fr",
    "lighthouse": "lighthouse http://localhost:5005/ --output json --output-path test/lighthouseOutput.json",
    "browserlist-update": "npx browserslist@latest --update-db",
    "deps-check": "npx unimported",
    "deadfiles-check": "deadfile ./src/main.jsx --dir src",
    "check": "i18n-check; deps-check; deadfiles-check",
    "sound-ok": "spd-say -p 100 'successo!' 2> /dev/null",
    "sound-ko": "spd-say -p 45 'errore!' 2> /dev/null",
    "env-decrypt-CHECK-IF-REALLY-NEEDED": "echo $(tput setaf 3)Password is the name of your little b0at\\!$(tput sgr0); gpg -d .env.gpg",
    "explore-source-map-CHECK-IF-REALLY-NEEDED": "source-map-explorer 'build/static/js/*.js'"
  },
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@mui/icons-material": "^6.0.2",
    "@mui/material": "^6.0.2",
    "@mui/system": "^6.0.2",
    "@react-oauth/google": "^0.12.1",
    "@svgr/rollup": "^8.1.0",
    "axios": "^1.7.7",
    "framer-motion": "^11.11.1",
    "i18next": "^23.15.1",
    "i18next-browser-languagedetector": "^8.0.0",
    "js-cookie": "^3.0.5",
    "leaflet": "^1.9.4",
    "libphonenumber-js": "^1.11.7",
    "lodash.debounce": "^4.0.8",
    "lucide-react": "^0.460.0",
    "luxon": "^3.5.0",
    "mui-tel-input": "^6.0.1",
    "notistack": "^3.0.1",
    "prop-types": "^15.8.1",
    "query-string": "^9.1.0",
    "react": "^18.3.1",
    "react-awesome-slider": "^4.1.0",
    "react-cookie-consent": "^9.0.0",
    "react-dom": "^18.3.1",
    "react-gravatar": "^2.6.3",
    "react-i18next": "^15.0.1",
    "react-input-mask": "^2.0.4",
    "react-leaflet": "^4.2.1",
    "react-loader-spinner": "^6.1.6",
    "react-material-ui-carousel": "^3.4.2",
    "react-multi-carousel": "^2.8.5",
    "react-router-dom": "^6.26.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "dotenv": "^16.4.5",
    "eslint": "^9.9.0",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "i18next-parser": "^9.0.2",
    "jsdom": "^25.0.0",
    "lighthouse": "^12.2.1",
    "lodash.get": "^4.4.2",
    "react-devtools": "^5.3.1",
    "vite": "^5.4.1",
    "vite-plugin-html": "^3.2.2",
    "vite-plugin-pwa": "^0.20.5",
    "vite-plugin-sitemap": "^0.7.1",
    "vitest": "^2.1.5",
    "workbox-core": "^7.1.0",
    "workbox-expiration": "^7.1.0",
    "workbox-precaching": "^7.1.0",
    "workbox-routing": "^7.1.0",
    "workbox-strategies": "^7.1.0",
    "workbox-window": "^7.1.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
