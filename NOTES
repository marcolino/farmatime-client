NOTES

Security
 - .env files are excluded by git repositories; .env.gpg files are not;
   when adding some secret to .env, crypt it with yarn env-crypt (or better
   add a pre-push hook to encrypt it); it can be later decrypted with `yarn env-decrypt`.

Font weigth names:
  Thin        100
  Extra Light 200
  Light       300
  Regular     400
  Medium      500
  Semi-Bold   600
  Bold        700
  Extra-Bold  800
  Black       900

REFERENCES

Authentication
 - AWS Cognito Agnita: https://levelup.gitconnected.com/agnita-authentication-for-create-react-app-using-aws-cognito-80cde1fb781b
 - aws-amplify Amplify.configure Auth.oauth parameter "responseType" can be set to "code" or "token";
   note that REFRESH token will only be generated when the responseType is "code"

Privacy (GDPR)
 - Privacy Policy generator: https://www.lorenzomoio.it/generatore-di-privacy-policy-gratuito
 - Terms of Use generator: https://zyro.com/it/strumenti/generatore-di-termini-e-condizioni

Material UI Theme Customization
 - MUI latest docs: https://mui.com/material-ui/getting-started/
 - MUI V5 Quickstart with hands on examples: https://levelup.gitconnected.com/material-ui-mui-v5-quick-start-with-hands-on-examples-649a0f712418
 - The ULTIMATE guide to styling/customizing Material UI (MUI): https://youtu.be/HsdjivqQ7BA?si=Em9v6dEw0GkjClbc
 - Customize mui themes: https://youtu.be/k8m_nLBH4UY
 - Customization theming: https://mui.com/customization/theming/
 

Performance
 - lighthouse & jest: https://medium.com/@togmund/lighthouse-jest-testing-what-matters-acbd0ff55825

Styling
 - Fluid Typography: https://css-tricks.com/snippets/css/fluid-typography
 - Color Contrast Checker: https://dequeuniversity.com/rules/axe/2.2/color-contrast?application=lighthouse

Tests
 - How to ignore partial Jest snapshot diffs: https://lanwen.ru/posts/ignore-jest-snapshot-diffs

AWS
 - Reset Cloudfront distribution alternate domain name for qiuiccasa:
   https://console.aws.amazon.com/cloudfront/v3/home?region=eu-west-1#/distributions/E30CJEQ2PIR5NL,
   edit, set alternate domain name to "quiccasa.sistemisolari.com"
 - Change Route53 Hosted zones: https://console.aws.amazon.com/route53/v2/hostedzones#ListRecordSets/Z01773871GDWEBESZZ419
   quiccasa.sistemisolari.com A record was: dleaj9yh1gim0.cloudfront.net.
 - Automating Cognito Custom Auth Domains with Amplify: https://medium.com/@matt.lavin/automating-cognito-custom-auth-domains-with-amplify-33e7b8f13266
 - Custom domain support with Cognito #1880: https://github.com/aws-amplify/amplify-cli/issues/1880#issuecomment-626331305
 - Using Your Own Domain for the Hosted UI: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html
 - Test Federated Signin: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-configuring-federation-with-social-idp.html
 - Cache Control - Adding headers to your objects using the Amazon S3 console: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html

CORS
 - React.js API calls to AWS Lambda, API Gateway and dealing with CORS:
   https://codeburst.io/react-js-api-calls-to-aws-lambda-api-gateway-and-dealing-with-cors-89fb897eb04d
 - How to set up a custom domain name for Lambda & API Gateway with Serverless
   https://www.serverless.com/blog/serverless-api-gateway-domain
 - StackOverflow: Serverless AWS Lambda CORS Error
   https://stackoverflow.com/questions/46627532/serverless-aws-lambda-cors-error

Cache
 - Serverless - Invalidating the Cache:
   https://serverless-stack.com/chapters/deploy-updates.html
   
Email
 - Create Email Addresses for your Route53 Custom Domain: https://medium.com/responsetap-engineering/easily-create-email-addresses-for-your-route53-custom-domain-589d099dd0f2
 
Google Search Console
 - https://search.google.com/search-console?resource_id=sc-domain%3Asistemisolari.com

Create Google Places API key for a project
 - https://console.cloud.google.com/apis/credentials?project=acme-431519

Google Developer console for oAuth
 - [TODO...](https://console.cloud.google.com/apis/dashboard?project=acme-431519)

Facebook Developer console for oAuth
 - https://developers.facebook.com/apps/

I18n
 - Language flags: https://apps.timwhitlock.info/emoji/tables/iso3166
 - yarn -D add i18next-parser

E-Commerce
 - 9 Must-Have Features of a Progressive Web App (PWA) for E-Commerce: https://www.simicart.com/blog/progressive-web-apps-features-for-ecommerce

PWA
 - Minimal PWA (and minimal service worker): https://flancer32.com/minimal-pwa-585664286cda

Push Notifications
 - Cloud messaging with Firebase: https://blog.logrocket.com/push-notifications-with-react-and-firebase
 - Why we don't need Firebase InApp Messaging: https://stackoverflow.com/a/64373136/709439
 - Firebase Push Notifications In React: https://www.smashingmagazine.com/2020/06/firebase-push-notifications-react
 - Best practices for FCM registration token management: https://firebase.google.com/docs/cloud-messaging/manage-tokens

Sounds
 - Announcing “use-sound”, a React Hook for Sound Effects: https://www.joshwcomeau.com/react/announcing-use-sound-react-hook/

Axios Interceptors
 - Debugging and Resolving Axios Network Error Issues: https://www.dhiwise.com/post/common-axios-network-errors-and-how-to-solve-the

React Cookie Law banner
 - https://github.com/keepist/react-gdpr-cookie-banner?tab=readme-ov-file

Error Boundaries
 - Error Handling in React Applications: React Error Boundary: https://medium.com/@agamkakkar/error-handling-in-react-applications-react-error-boundary-e633d383762a

Theming
 - MUi Color Palette Creation Tool: https://m2.material.io/inline-tools/color/
 - Palette - Material UI: https://mui.com/material-ui/customization/palette/

Oauth - Open popup window
Q:
sWhy do I get error: Refused to execute inline script because it violates the following Content Security Policy directive: "script-src 'self'" in js on the client?

A: (ChatGPT)
The error you are encountering, "Refused to execute inline script because it violates the following Content Security Policy directive: script-src 'self'", occurs due to the Content Security Policy (CSP). CSP is a security feature that helps prevent attacks like Cross-Site Scripting (XSS) by specifying which sources of content (scripts, styles, images, etc.) the browser is allowed to load and execute.

In your case, the browser is blocking the inline <script> tag from executing in your OAuth callback page because the current CSP only allows scripts from the server itself ('self'), but disallows inline scripts.

Solutions:
1. Update Content Security Policy (CSP) to Allow Inline Scripts:
You can modify the Content Security Policy to allow inline scripts, but this approach is generally discouraged for security reasons.

Express Example: You can modify the headers in your Express server to include the unsafe-inline directive in the script-src policy:
javascript
Copia codice
app.use((req, res, next) => {
  res.setHeader(
    "Content-Security-Policy",
    "script-src 'self' 'unsafe-inline';"
  );
  next();
});
This will allow inline scripts to run, but use this carefully as it opens up potential security vulnerabilities.

2. Move Inline Script to an External JavaScript File:
A more secure approach is to move the inline script that posts the data to the parent window and closes the popup into an external JavaScript file.

Create a separate JavaScript file for the code that will send the data to the parent window and close the popup.

Create an external script file: For example, create callbackHandler.js:

javascript
Copia codice
(function() {
  // Send tokens to the parent window
  window.opener.postMessage({
    accessToken: accessTokenFromServer,
    refreshToken: refreshTokenFromServer
  }, '*');

  // Close the popup
  window.close();
})();
Modify your server code to reference the external file:

javascript
Copia codice
app.get('/api/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
  const accessToken = req.user.accessToken;
  const refreshToken = req.user.refreshToken;

  // Serve a page that includes the external JS file
  res.send(`
    <html>
      <head>
        <script>
          var accessTokenFromServer = '${accessToken}';
          var refreshTokenFromServer = '${refreshToken}';
        </script>
        <script src="/path/to/callbackHandler.js"></script>
      </head>
      <body></body>
    </html>
  `);
});
By moving the code to an external script file, it satisfies the default 'self' policy of CSP, which allows scripts to be loaded from the same origin.

3. Use Nonce-based CSP for Inline Scripts:
Another secure option is to use nonces (random unique tokens) to allow specific inline scripts to run.

Modify your CSP to allow inline scripts with a specific nonce:

javascript
Copia codice
app.use((req, res, next) => {
  const nonce = crypto.randomBytes(16).toString("base64"); // Generate a unique nonce
  res.setHeader(
    "Content-Security-Policy",
    `script-src 'self' 'nonce-${nonce}';`
  );
  res.locals.nonce = nonce;
  next();
});
In your callback response, add the nonce to the script tag:

javascript
Copia codice
app.get('/api/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
  const accessToken = req.user.accessToken;
  const refreshToken = req.user.refreshToken;
  const nonce = res.locals.nonce; // Retrieve the nonce

  res.send(`
    <html>
      <body>
        <script nonce="${nonce}">
          window.opener.postMessage({
            accessToken: '${accessToken}',
            refreshToken: '${refreshToken}'
          }, '*');
          window.close();
        </script>
      </body>
    </html>
  `);
});
This allows that specific inline script to run while maintaining the rest of the CSP restrictions.

Summary:
Option 1: Temporarily allow inline scripts using the unsafe-inline directive in the CSP, but this is less secure.
Option 2: Move the inline script to an external JS file and reference it from your HTML response (recommended for better security).
Option 3: Use nonce-based CSP to selectively allow trusted inline scripts while keeping strong security controls in place.
The second option (moving the script to an external file) is often the best compromise between security and functionality.