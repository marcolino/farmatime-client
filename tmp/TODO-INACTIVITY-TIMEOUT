Q:
I have a react.js app, using access and refresh tokens to authenticate to a node.js express server. access taken expires after a week and refresh token every 5 minutes. I'like to tell the user - after say 10 minutes of inactivity - to explicitly ask to prolong the session. Just like bank web apps do. Can you please show an example of some code to realize this requisite?

CoPilot A:
Got it! Here's how you can do it:

1. **Custom hook to track user inactivity:**

```javascript
import { useState, useEffect } from 'react';

const useInactivityTimer = (timeout, onTimeout) => {
  const [lastActivity, setLastActivity] = useState(Date.now());

  useEffect(() => {
    const handleActivity = () => setLastActivity(Date.now());

    const events = ['mousemove', 'keydown', 'click'];
    events.forEach(event => window.addEventListener(event, handleActivity));

    const interval = setInterval(() => {
      if (Date.now() - lastActivity > timeout) {
        onTimeout();
      }
    }, 1000);

    return () => {
      events.forEach(event => window.removeEventListener(event, handleActivity));
      clearInterval(interval);
    };
  }, [lastActivity, timeout, onTimeout]);

  return lastActivity;
};

export default useInactivityTimer;
```

2. **Use the custom hook in your component:**

```javascript
import React, { useState } from 'react';
import useInactivityTimer from './useInactivityTimer';

const App = () => {
  const [showPrompt, setShowPrompt] = useState(false);

  const handleTimeout = () => {
    setShowPrompt(true);
  };

  useInactivityTimer(10 * 60 * 1000, handleTimeout); // 10 minutes

  const handleExtendSession = () => {
    setShowPrompt(false);
  };

  const handleLogout = () => {
    // Logic to log out the user
    console.log('User logged out due to inactivity');
    // Clear tokens and redirect to login page
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    window.location.href = '/login';
  };

  useEffect(() => {
    if (showPrompt) {
      const timer = setTimeout(() => {
        handleLogout();
      }, 2 * 60 * 1000); // 2 minutes to respond

      return () => clearTimeout(timer);
    }
  }, [showPrompt]);

  return (
    <div>
      {showPrompt && (
        <div className="session-prompt">
          <p>Do you want to continue using the app?</p>
          <button onClick={handleExtendSession}>Yes</button>
          <button onClick={handleLogout}>No</button>
        </div>
      )}
      {/* Your app content */}
    </div>
  );
};

export default App;
```

In this setup:
- The user is prompted after 10 minutes of inactivity.
- If the user clicks "Yes," the prompt is dismissed, and the session continues.
- If the user clicks "No" or doesn't respond within 2 minutes, the user is logged out.

This should help you manage user sessions effectively. Let me know if you need any further adjustments!
